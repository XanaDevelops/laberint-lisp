(trace all-visited algorisme-wilson-aux random-walk)
(random-walk algorisme-wilson-aux all-visited)
> (algorisme-wilson "r.txt")
Entering: ALGORISME-WILSON-AUX, Argument list: (#S(llista-composta laberint ((paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (cami paret paret paret paret paret paret paret)) visitats ((7 0)) path ((7 0))))
 Entering: ALL-VISITED, Argument list: (((7 0)) ((paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (cami paret paret paret paret paret paret paret)))
 Exiting: ALL-VISITED, Value: nil
 Entering: RANDOM-WALK, Argument list: ((3 5) #S(llista-composta laberint ((paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (cami paret paret paret paret paret paret paret)) visitats ((7 0)) path ((7 0))))

[ back to top level ]
> ; loading "tco.lsp"
; loading "libs/listLib.lsp"
; loading "VARSGLOBALS.lsp"
; loading "fitxer-io.lsp"
; loading "VARSGLOBALS.lsp"
(algorisme-wilson "r.txt")
Entering: ALGORISME-WILSON-AUX, Argument list: (#S(llista-composta laberint ((paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret cami) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret)) visitats ((0 0)) path ((5 7))))
 Entering: ALL-VISITED, Argument list: (((0 0)) ((paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret cami) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret)))
 Exiting: ALL-VISITED, Value: nil
 Entering: RANDOM-WALK, Argument list: ((2 2) #S(llista-composta laberint ((paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret cami) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret)) visitats ((0 0)) path ((5 7))))
  Entering: ALGORISME-WILSON-AUX, Argument list: (#S(llista-composta laberint ((paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret cami) (paret paret paret paret paret paret paret paret) (paret paret paret paret cami paret paret paret) (paret paret paret paret paret paret paret cami) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret)) visitats ((2 0) (4 0) (4 4) (2 2) (5 7) (0 0)) path nil))
   Entering: ALL-VISITED, Argument list: (((2 0) (4 0) (4 4) (2 2) (5 7) (0 0)) ((paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret cami) (paret paret paret paret paret paret paret paret) (paret paret paret paret cami paret paret paret) (paret paret paret paret paret paret paret cami) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret)))
   Exiting: ALL-VISITED, Value: nil
   Entering: RANDOM-WALK, Argument list: ((1 5) #S(llista-composta laberint ((paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret cami) (paret paret paret paret paret paret paret paret) (paret paret paret paret cami paret paret paret) (paret paret paret paret paret paret paret cami) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret)) visitats ((2 0) (4 0) (4 4) (2 2) (5 7) (0 0)) path nil))
    Entering: ALGORISME-WILSON-AUX, Argument list: (#S(llista-composta laberint ((paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret cami) (paret paret paret paret paret cami paret paret) (paret paret paret paret cami paret paret paret) (paret paret paret paret paret paret paret cami) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret)) visitats ((3 7) (3 5) (2 0) (4 0) (4 4) (2 2) (5 7) (0 0)) path nil))
     Entering: ALL-VISITED, Argument list: (((3 7) (3 5) (2 0) (4 0) (4 4) (2 2) (5 7) (0 0)) ((paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret cami) (paret paret paret paret paret cami paret paret) (paret paret paret paret cami paret paret paret) (paret paret paret paret paret paret paret cami) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret)))
     Exiting: ALL-VISITED, Value: nil
     Entering: RANDOM-WALK, Argument list: ((3 6) #S(llista-composta laberint ((paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret cami) (paret paret paret paret paret cami paret paret) (paret paret paret paret cami paret paret paret) (paret paret paret paret paret paret paret cami) (paret paret paret paret paret paret paret paret) (paret paret paret paret paret paret paret paret)) visitats ((3 7) (3 5) (2 0) (4 0) (4 4) (2 2) (5 7) (0 0)) path nil))

[ back to top level ]
> ; loading "tco.lsp"
; loading "libs/listLib.lsp"
; loading "VARSGLOBALS.lsp"
error: bad argument type - (0 1)
1> 